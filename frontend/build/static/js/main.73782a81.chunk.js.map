{"version":3,"sources":["search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Search","searchQuery","setSearchQuery","action","method","htmlFor","className","value","onInput","e","target","type","id","placeholder","name","App","useState","setEvents","search","window","location","query","URLSearchParams","get","filteredEvents","setFilteredEvents","careRecipients","setCareRecipients","eventUrl","getEvents","fetch","then","res","ok","Error","json","console","log","events","filter","event","wordArray","toLowerCase","split","boolArray","index","push","isWordInEvent","reduce","previousValue","currentValue","filterEvents","word","key","includes","changeTimeFormat","timestamp","date","Date","moment","format","useEffect","onChange","map","idObject","care_recipient_id","event_type","visit_id","caregiver_id","payload","note","eventDisplay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73782a81.chunk.js","sourcesContent":["import './css/search.css'\n\nconst Search= ({searchQuery, setSearchQuery}: any) => {\n    return <form action=\"/\" method=\"get\">\n        <label htmlFor=\"header-search\">\n            <span className=\"visually-hidden\">Search Events</span>\n        </label>\n        <input className=\"input\"\n            value={searchQuery}\n            onInput={e =>\n                /*@ts-ignore*/\n                setSearchQuery(e.target.value)}\n            type=\"text\"\n            id=\"header-search\"\n            placeholder=\"Filter\"\n            name=\"s\" \n        />\n    </form>\n}\n\nexport default Search;","import { useEffect, useState } from 'react';\nimport './App.css';\nimport './css/table.css'\nimport moment from \"moment\";\nimport Search from \"./search\";\n\n\nfunction  App() {\n  const [events,setEvents] = useState([])\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get('s');\n  const [searchQuery, setSearchQuery] = useState(query || '');\n  const [filteredEvents,setFilteredEvents]=useState([] as any)\n  const [careRecipients,setCareRecipients]=useState([])\n  const eventUrl = 'http://localhost:3000/event'\n\n\n  function getEvents(){\n    fetch(eventUrl)\n    .then(res => {\n      if (!res.ok){\n                throw Error(\"No access to database\");\n            }\n      return res.json()})\n    .then((res)=>{\n      setEvents(res)\n      console.log(res)\n      return res\n        })\n    .then((events)=>{filterEvents(events,query as string)}\n    )\n  }\n\n  function getCareRecipients(){\n    fetch(eventUrl+'/careRecipient')\n    .then(res => {\n      if (!res.ok){\n                throw Error(\"No access to database\");\n            }\n      return res.json()})\n    .then((res)=>{\n      setCareRecipients(res)\n        })\n  }\n\n  function isWordInEvent(word :string,event: any){\n    for(const key in event){\n      if(typeof event[key]==='string'){\n        const value = event[key].toLowerCase()\n        if (value.includes(word)){\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  function filterEvents(events: any[],query: string){\n    if (!query){\n      setFilteredEvents(events)\n    }\n    else{\n      setFilteredEvents(\n          events.filter((event) => {\n          const lowerCaseQuery= query.toLowerCase()\n          const wordArray = lowerCaseQuery.split(' ')\n          const boolArray: boolean[] = []\n          for(const index in wordArray){\n            boolArray.push(isWordInEvent(wordArray[index],event))\n          }\n          return boolArray.reduce((previousValue,currentValue)=> {return previousValue && currentValue})\n        })\n      )\n    }\n  }\n\n  function changeTimeFormat(timestamp:string){\n    const date = new Date(timestamp)\n    return moment(date).format('YYYY-MM-DD HH:mm')\n  }\n\n  function replaceUnderscoreWithSpaces(sentence: string){\n    const sentenceArray = sentence.split('_')\n    return sentenceArray.join(' ')\n  }\n\n  useEffect(() => {\n    getEvents()\n    getCareRecipients()\n    console.log(filteredEvents)\n\t}, []);\n\n\n  function eventDisplay(event: any){\n    return(\n      <tr key={(event.id)}>\n        <th>{changeTimeFormat(event.timestamp)}</th>\n        <th>{event.event_type}</th>\n        <th>{event.visit_id}</th>\n        <th>{event.care_recipient_id}</th>\n        <th>{event.caregiver_id}</th>\n        <th>{event.payload.note}</th>\n      </tr>\n    )\n  }\n\n  function handleSelectChange(e: any){\n    setSearchQuery(e.target.value)\n  }\n\n\n  return (\n    <div>\n\n      <label>Choose a care recipient:</label>\n      <select name=\"careRecipient\" onChange={handleSelectChange}>\n          {careRecipients.map((idObject: any) => (\n              <option value={idObject.care_recipient_id}>{idObject.care_recipient_id}</option>\n            ))}\n      </select>\n\n      <Search\n      searchQuery={searchQuery}\n      setSearchQuery={setSearchQuery}/>\n    <div>\n        <table className=\"content-table\">\n          <thead>\n          <tr>\n            <th>Time</th>\n            <th>Event Type</th>\n            <th>Visit</th>\n            <th>Care Recipient</th>\n            <th>Caregiver</th>\n            <th>Notes</th>\n          </tr>\n          </thead>\n          <tbody>\n            {filteredEvents.map((event: any) => (eventDisplay(event)))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}