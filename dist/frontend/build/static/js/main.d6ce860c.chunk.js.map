{"version":3,"sources":["search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Search","searchQuery","setSearchQuery","htmlFor","className","value","onInput","e","target","type","id","placeholder","name","App","useState","events","setEvents","search","window","location","query","URLSearchParams","get","filteredEvents","setFilteredEvents","careRecipients","setCareRecipients","eventUrl","process","isWordInEvent","word","event","key","toLowerCase","includes","filterEvents","filter","wordArray","split","boolArray","index","push","reduce","previousValue","currentValue","changeTimeFormat","timestamp","date","Date","moment","format","useEffect","console","log","fetch","then","res","ok","Error","json","onChange","map","idObject","care_recipient_id","sentence","event_type","join","visit_id","caregiver_id","payload","note","eventDisplay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ce860c.chunk.js","sourcesContent":["import './css/search.css'\n\nconst Search= ({searchQuery, setSearchQuery}: any) => {\n    return <div>\n        <label htmlFor=\"header-search\">\n            <span className=\"visually-hidden\">Search Events</span>\n        </label>\n        <input className=\"input\"\n            value={searchQuery}\n            onInput={e =>\n                /*@ts-ignore*/\n                setSearchQuery(e.target.value)}\n            type=\"text\"\n            id=\"header-search\"\n            placeholder=\"Filter\"\n            name=\"s\" \n        />\n    </div>\n}\n\nexport default Search;","import { useEffect, useState } from 'react';\nimport './App.css';\nimport './css/table.css';\nimport './css/header.css';\nimport moment from \"moment\";\nimport Search from \"./search\";\n\n\nfunction  App() {\n  const [events,setEvents] = useState([])\n  const { search } = window.location;\n  const query = new URLSearchParams(search).get('s');\n  const [searchQuery, setSearchQuery] = useState(query || '');\n  const [filteredEvents,setFilteredEvents]=useState([] as any)\n  const [careRecipients,setCareRecipients]=useState([])\n  const eventUrl = `${process.env.REACT_APP_BACKEND_URL}/event`\n\n\n  function getEvents(){\n    console.log(eventUrl)\n    fetch(eventUrl)\n    .then(res => {\n      if (!res.ok){\n                throw Error(\"No access to database\");\n            }\n      return res.json()})\n    .then((res)=>{\n      setEvents(res)\n      console.log(res)\n      return res\n        })\n    .then((events)=>{filterEvents(events,query as string)}\n    )\n  }\n\n  function getCareRecipients(){\n    fetch(eventUrl+'/careRecipient')\n    .then(res => {\n      if (!res.ok){\n                throw Error(\"No access to database\");\n            }\n      return res.json()})\n    .then((res)=>{\n      setCareRecipients(res)\n        })\n  }\n\n  function isWordInEvent(word :string,event: any){\n    for(const key in event){\n      if(typeof event[key]==='string'){\n        const value = event[key].toLowerCase()\n        if (value.includes(word)){\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  function filterEvents(events: any[],query: string){\n    if (!query){\n      setFilteredEvents(events)\n    }\n    else{\n      setFilteredEvents(\n          events.filter((event) => {\n          const lowerCaseQuery= query.toLowerCase()\n          const wordArray = lowerCaseQuery.split(' ')\n          const boolArray: boolean[] = []\n          for(const index in wordArray){\n            boolArray.push(isWordInEvent(wordArray[index],event))\n          }\n          return boolArray.reduce((previousValue,currentValue)=> {return previousValue && currentValue})\n        })\n      )\n    }\n  }\n\n\n\n  function changeTimeFormat(timestamp:string){\n    const date = new Date(timestamp)\n    return moment(date).format('YYYY-MM-DD HH:mm')\n  }\n\n  function replaceUnderscoreWithSpaces(sentence: string){\n    const sentenceArray = sentence.split('_')\n    return sentenceArray.join(' ')\n  }\n\n\n\n// At the first render\n  useEffect(() => {\n    getEvents()\n    getCareRecipients()\n    console.log(filteredEvents)\n\t}, []);\n\n// When searchQuery is modified\n  useEffect(() => {\n    filterEvents(events,searchQuery)\n\t}, [searchQuery]);\n\n\n  function eventDisplay(event: any){\n    return(\n      <tr key={(event.id)}>\n        <th>{changeTimeFormat(event.timestamp)}</th>\n        <th>{replaceUnderscoreWithSpaces(event.event_type)}</th>\n        <th>{event.visit_id}</th>\n        <th>{event.care_recipient_id}</th>\n        <th>{event.caregiver_id}</th>\n        <th>{event.payload.note}</th>\n      </tr>\n    )\n  }\n\n  \n  function handleSelectChange(e: any){\n    setSearchQuery(e.target.value)\n  }\n\n\n  return (\n    <div>\n      <div className='header'>\n        <div className='header-container'>\n          <label className='header-element'>Choose a care recipient:</label>\n          <select className='header-element' name=\"careRecipient\" onChange={handleSelectChange}>\n              {careRecipients.map((idObject: any) => (\n                  <option value={idObject.care_recipient_id}>{idObject.care_recipient_id}</option>\n                ))}\n          </select>\n        </div>\n\n        <div className='header-container'>\n          <label className='header-element'>Or filter manualy on any field:</label>   \n          <Search className='eheader-lement'\n          searchQuery={searchQuery}\n          setSearchQuery={setSearchQuery}/>\n        </div>\n      </div>\n\n    <div>\n        <table className=\"content-table\">\n          <thead>\n          <tr>\n            <th>Time</th>\n            <th>Event Type</th>\n            <th>Visit</th>\n            <th>Care Recipient</th>\n            <th>Caregiver</th>\n            <th>Notes</th>\n          </tr>\n          </thead>\n          <tbody>\n            {filteredEvents.map((event: any) => (eventDisplay(event)))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}